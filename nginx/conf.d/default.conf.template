# HTTP server - redirect all traffic to HTTPS
server {
    listen 80;
    server_name _;
    
    # Redirect all HTTP traffic to HTTPS
    return 301 https://$host$request_uri;
}

# HTTPS server configuration
server {
    listen 443 ssl http2;
    server_name ${DOMAIN};
    
    # SSL configuration
    ssl_certificate ${SSL_CERT_PATH};
    ssl_certificate_key ${SSL_KEY_PATH};
    
    # Modern SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    
    # HSTS (HTTP Strict Transport Security)
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    
    # Common proxy settings for all locations
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Port $server_port;
    
    # Timeout settings
    proxy_connect_timeout 60s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;
    
    # Buffer settings
    proxy_buffering on;
    proxy_buffer_size 4k;
    proxy_buffers 8 4k;
    proxy_busy_buffers_size 8k;
    
    # Example: Proxy to internal web application
    location /app/ {
        # Apply rate limiting
        limit_req zone=general burst=${RATE_LIMIT_GENERAL_BURST:-20} nodelay;
        
        # Proxy to internal HTTP service (HTTPS -> HTTP downgrade)
        proxy_pass http://${INTERNAL_APP_HOST}:${INTERNAL_APP_PORT}/;
        
        # Remove the /app prefix when forwarding
        rewrite ^/app/(.*) /$1 break;
    }
    
    # Example: Proxy to API service
    location /api/ {
        # Apply rate limiting
        limit_req zone=api burst=${RATE_LIMIT_API_BURST:-10} nodelay;
        
        # Proxy to internal HTTP API service
        proxy_pass http://${INTERNAL_API_HOST}:${INTERNAL_API_PORT}/;
        
        # Keep the /api prefix
        # proxy_pass http://${INTERNAL_API_HOST}:${INTERNAL_API_PORT}/api/;
    }
    
    # Example: Proxy to authentication service
    location /auth/ {
        # Apply stricter rate limiting for auth endpoints
        limit_req zone=login burst=${RATE_LIMIT_LOGIN_BURST:-5} nodelay;
        
        # Proxy to internal HTTP auth service
        proxy_pass http://${INTERNAL_AUTH_HOST}:${INTERNAL_AUTH_PORT}/;
    }
    
    # Example: WebSocket proxy
    location /ws/ {
        # Apply WebSocket rate limiting
        limit_req zone=websocket burst=${RATE_LIMIT_WEBSOCKET_BURST:-3} nodelay;
        
        # Proxy to internal WebSocket service (HTTP)
        proxy_pass http://${INTERNAL_WEBSOCKET_HOST}:${INTERNAL_WEBSOCKET_PORT}/;
        
        # WebSocket specific headers
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
    
    # Example: File upload endpoint
    location /upload/ {
        # Apply upload rate limiting
        limit_req zone=upload burst=${RATE_LIMIT_UPLOAD_BURST:-1} nodelay;
        
        # Set client body size limit
        client_max_body_size ${UPLOAD_MAX_SIZE:-100M};
        
        # Proxy to upload service
        proxy_pass http://${INTERNAL_UPLOAD_HOST:-${INTERNAL_MAIN_HOST}}:${INTERNAL_UPLOAD_PORT:-${INTERNAL_MAIN_PORT}}/upload/;
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    # Default location for static files or main application
    location / {
        # Apply rate limiting
        limit_req zone=general burst=${RATE_LIMIT_GENERAL_BURST:-20} nodelay;
        
        # Proxy to main internal HTTP service
        proxy_pass http://${INTERNAL_MAIN_HOST}:${INTERNAL_MAIN_PORT}/;
    }
}

# Additional server block for different domain/subdomain
server {
    listen 443 ssl http2;
    server_name ${API_DOMAIN};
    
    # Use the same SSL certificate or a different one
    ssl_certificate ${SSL_CERT_PATH};
    ssl_certificate_key ${SSL_KEY_PATH};
    
    # SSL configuration (same as above)
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    
    # Proxy settings
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Port $server_port;
    
    # API-specific configuration
    location / {
        limit_req zone=api burst=${RATE_LIMIT_API_BURST:-50} nodelay;
        
        # Proxy to internal HTTP API service
        proxy_pass http://${INTERNAL_API_HOST}:${INTERNAL_API_PORT}/;
        
        # API-specific headers
        add_header X-API-Version "1.0" always;
    }
}
