name: Build, Test, and Push Docker Image

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Custom tag for the image'
        required: false
        default: 'latest'
      push_to_registry:
        description: 'Push to registry'
        required: false
        default: 'true'
        type: boolean

env:
  REGISTRY: docker.io
  IMAGE_NAME: nginx-gateway

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event_name == 'workflow_dispatch' }}
        labels: |
          org.opencontainers.image.title=Nginx Reverse Proxy Gateway
          org.opencontainers.image.description=HTTPS-to-HTTP reverse proxy with configurable rate limiting
          org.opencontainers.image.vendor=${{ github.repository_owner }}
          org.opencontainers.image.licenses=MIT

    - name: Build Docker image for testing
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64
        push: false
        load: true
        tags: test-image:latest
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        build-args: |
          BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}
          BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

    - name: Test Docker image
      run: |
        # Test the locally built image
        IMAGE_TAG="test-image:latest"
        echo "Testing image: $IMAGE_TAG"
        
        # First, test if the image can run a simple command
        echo "Testing basic image functionality..."
        if ! docker run --rm "$IMAGE_TAG" sh -c "echo 'Image can execute commands'"; then
          echo "❌ Image cannot execute basic commands"
          exit 1
        fi
        
        # Test that the image can start successfully
        echo "Starting container..."
        CONTAINER_ID=$(docker run -d --name test-nginx \
          -e DOMAIN=test.example.com \
          -e INTERNAL_MAIN_HOST=httpbin.org \
          -e INTERNAL_MAIN_PORT=80 \
          -e INTERNAL_APP_HOST=httpbin.org \
          -e INTERNAL_APP_PORT=80 \
          -e INTERNAL_API_HOST=httpbin.org \
          -e INTERNAL_API_PORT=80 \
          -e INTERNAL_AUTH_HOST=httpbin.org \
          -e INTERNAL_AUTH_PORT=80 \
          -e INTERNAL_WEBSOCKET_HOST=httpbin.org \
          -e INTERNAL_WEBSOCKET_PORT=80 \
          -e INTERNAL_UPLOAD_HOST=httpbin.org \
          -e INTERNAL_UPLOAD_PORT=80 \
          -e RATE_LIMIT_GENERAL_RATE=10r/s \
          -e RATE_LIMIT_API_RATE=50r/s \
          -e RATE_LIMIT_LOGIN_RATE=5r/m \
          "$IMAGE_TAG")
        
        echo "Container ID: $CONTAINER_ID"
        
        # Immediately check if container started
        sleep 2
        CONTAINER_EXISTS=$(docker ps -a --filter name=test-nginx --format "{{.Names}}" | head -n1)
        if [ "$CONTAINER_EXISTS" != "test-nginx" ]; then
          echo "❌ Container was not created or was immediately removed"
          exit 1
        fi
        
        # Check if container started and get status
        CONTAINER_STATUS=$(docker inspect test-nginx --format='{{.State.Status}}' 2>/dev/null || echo "not_found")
        echo "Initial container status: $CONTAINER_STATUS"
        
        # If container exited immediately, show logs and exit
        if [ "$CONTAINER_STATUS" = "exited" ]; then
          echo "❌ Container exited immediately"
          echo "Exit code: $(docker inspect test-nginx --format='{{.State.ExitCode}}')"
          echo "Container logs:"
          docker logs test-nginx
          docker rm test-nginx
          exit 1
        fi
        
        # Wait for container to be ready (healthcheck needs time)
        echo "Waiting for nginx to start..."
        for i in $(seq 1 12); do
          sleep 5
          STATUS=$(docker inspect test-nginx --format='{{.State.Status}}' 2>/dev/null || echo "gone")
          echo "Check $i/12: Container status: $STATUS"
          
          if [ "$STATUS" = "exited" ]; then
            echo "❌ Container exited during startup"
            echo "Exit code: $(docker inspect test-nginx --format='{{.State.ExitCode}}')"
            echo "Container logs:"
            docker logs test-nginx
            docker rm test-nginx
            exit 1
          elif [ "$STATUS" = "running" ]; then
            echo "✅ Container is running"
            break
          fi
          
          if [ $i -eq 12 ]; then
            echo "❌ Container did not start within 60 seconds"
            echo "Final status: $STATUS"
            echo "Container logs:"
            docker logs test-nginx 2>/dev/null || echo "No logs available"
            docker rm -f test-nginx 2>/dev/null || true
            exit 1
          fi
        done
        
        # Test health check endpoint
        echo "Running health check..."
        if ! docker exec test-nginx /usr/local/bin/healthcheck.sh; then
          echo "❌ Health check failed"
          echo "Container logs:"
          docker logs test-nginx
          docker rm -f test-nginx 2>/dev/null || true
          exit 1
        fi
        
        # Test HTTP redirect (should get redirect response)
        echo "Testing HTTP redirect..."
        HTTP_CODE=$(docker exec test-nginx curl -s -o /dev/null -w "%{http_code}" http://localhost:80/ 2>/dev/null || echo "000")
        echo "HTTP response code: $HTTP_CODE"
        if [ "$HTTP_CODE" != "301" ]; then
          echo "❌ HTTP redirect test failed (expected 301, got $HTTP_CODE)"
          echo "Container logs:"
          docker logs test-nginx
          docker rm -f test-nginx 2>/dev/null || true
          exit 1
        fi
        
        # Test HTTPS response (should get some response from httpbin.org)
        echo "Testing HTTPS response..."
        HTTPS_CODE=$(docker exec test-nginx curl -k -s -o /dev/null -w "%{http_code}" https://localhost:443/ 2>/dev/null || echo "000")
        echo "HTTPS response code: $HTTPS_CODE"
        if ! echo "$HTTPS_CODE" | grep -qE "^(200|502|503|504)$"; then
          echo "❌ HTTPS response test failed (expected 200/502/503/504, got $HTTPS_CODE)"
          echo "Trying to test actual proxy to httpbin.org..."
          docker exec test-nginx curl -k -s -I https://localhost:443/ || true
          echo "Container logs:"
          docker logs test-nginx
          docker rm -f test-nginx 2>/dev/null || true
          exit 1
        fi
        
        # Cleanup
        echo "Cleaning up..."
        docker stop test-nginx
        docker rm test-nginx
        
        echo "✅ Docker image test passed!"

    - name: Build and push Docker image
      if: ${{ github.event.inputs.push_to_registry != 'false' }}
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

    - name: Build summary
      run: |
        echo "🎉 Build completed successfully!"
        echo "📦 Built and tested image: test-image:latest"
        if [[ "${{ github.event.inputs.push_to_registry }}" != "false" ]]; then
          echo "🚀 Pushed to registry with tags:"
          echo "${{ steps.meta.outputs.tags }}" | while read tag; do
            echo "  - $tag"
          done
        else
          echo "⏸️  Image was built and tested but not pushed to registry"
        fi
